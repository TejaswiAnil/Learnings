
Basic:
1. platform independent 
2. every browser will have its javascript engine say javascript virtual machine like v8(chrome), spiderMoneky(firefox)
3. restrictions on js for safety
	different tabs on browser dont know each other
	cannot read arbitrary files in the system/hard disk
	JavaScript can easily communicate over the net to the server where the current page came from. But its ability to receive data from other sites/domains is crippled
4. IDE and light weight editors can be used for javascript
5. adavntage of exterbnal js file is, it is downloaded once and later used from cache

code structure:
semi-colons:
1. semicolon can be omitted where line break is available but not always(automatic semi colon insertion)
2. JS will not auto fill semicolon before []
	eg: alert("There will be an error")
		[1, 2].forEach(alert)
	complied as 	
		alert("There will be an error")[1, 2].forEach(alert);// only "there will be error will be alerted"
  so it is recommended to use semi-colons.	

comments:
1. nested comments are not supported it will throw error
	/* multi
	   /*line*/
	comment*/
2. var a = "pofds"[1,3];
		alert(a) // d
   "pofds"[1,3] is same as "pofds"[3]
   
"use strict":
1. should be at the start of the script
2. can be added at the start of function then only that function will be in strict mode
3. The "use strict" directive switches the JS engine to the “modern” mode from "default" mode
4. It makes no sense if used in middle it should be at the start
5. there is no way to cancel "use strict", once included then no return to default mode  
6. Introduced in ES5
  "use strict";
  num = 5; // error becoz num is not declared
  
  

Variables:
1. variables are case-sensitive and can have/be $ and _
2. using var is old style whereas let is modern and for constants use "const"
   capital-named constants are only used as aliases for “hard-coded” values. 
    const val = 123;
    val = 456; // error becoz const cannot be modified

Note:
1)	let a="test";
	let b=a+"success"; 
	b//testsuccess

	let c = `${a} success`;
	c//test success
	
	let d = `${1+2} calc`;
	d // 3 calc

2) typeof a is same as typeof(a)
3) String(a) is same as a.toString()
4) Number(a) --> convert to number like toNumber() even all arthmetic operators converts to number except +
5) Boolean(a) --> convert to boolean like toBoolean()
6) unary + will convert to number 
    let a ="2"; //string
	a= +a;//now a is number
	
	